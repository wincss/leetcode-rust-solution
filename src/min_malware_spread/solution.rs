use crate::*;

use std::collections::HashMap;

use common::algorithms::union_find::*;

impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, initial: Vec<i32>) -> i32 {
        let mut parent = HashMap::new();
        let mut size = HashMap::new();
        for (i, v) in graph.iter().enumerate() {
            for (j, &connected) in v.iter().enumerate() {
                if connected == 1 {
                    union(&i, &j, &mut parent, &mut size);
                }
            }
        }
        let mut initial = initial;
        let mut effect = vec![0; initial.len()];
        let mut infected_by = HashMap::new();
        initial.sort();
        for (i, &k) in initial.iter().enumerate() {
            let group = find(&(k as usize), &mut parent, &mut size);
            if let Some(&v) = infected_by.get(&group) {
                effect[v] = 0;
                effect[i] = 0;
            } else {
                effect[i] = size[&group];
                infected_by.insert(group, i);
            }
        }
        // println!("initial={:?}, effect={:?}", initial, effect);
        let mut result = 0;
        let mut maxeff = -1;
        for (i, v) in effect.into_iter().enumerate() {
            if v as i32 > maxeff {
                maxeff = v as i32;
                result = initial[i];
            }
        }
        result
    }
}
